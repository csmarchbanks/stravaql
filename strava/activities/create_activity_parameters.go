// Code generated by go-swagger; DO NOT EDIT.

package activities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCreateActivityParams creates a new CreateActivityParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateActivityParams() *CreateActivityParams {
	return &CreateActivityParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateActivityParamsWithTimeout creates a new CreateActivityParams object
// with the ability to set a timeout on a request.
func NewCreateActivityParamsWithTimeout(timeout time.Duration) *CreateActivityParams {
	return &CreateActivityParams{
		timeout: timeout,
	}
}

// NewCreateActivityParamsWithContext creates a new CreateActivityParams object
// with the ability to set a context for a request.
func NewCreateActivityParamsWithContext(ctx context.Context) *CreateActivityParams {
	return &CreateActivityParams{
		Context: ctx,
	}
}

// NewCreateActivityParamsWithHTTPClient creates a new CreateActivityParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateActivityParamsWithHTTPClient(client *http.Client) *CreateActivityParams {
	return &CreateActivityParams{
		HTTPClient: client,
	}
}

/* CreateActivityParams contains all the parameters to send to the API endpoint
   for the create activity operation.

   Typically these are written to a http.Request.
*/
type CreateActivityParams struct {

	/* Commute.

	   Set to 1 to mark as commute.
	*/
	Commute *int64

	/* Description.

	   Description of the activity.
	*/
	Description *string

	/* Distance.

	   In meters.

	   Format: float
	*/
	Distance *float32

	/* ElapsedTime.

	   In seconds.
	*/
	ElapsedTime int64

	/* HideFromHome.

	   Set to true to mute activity.
	*/
	HideFromHome *bool

	/* Name.

	   The name of the activity.
	*/
	Name string

	/* SportType.

	   Sport type of activity. For example - Run, MountainBikeRide, Ride, etc.
	*/
	SportType string

	/* StartDateLocal.

	   ISO 8601 formatted date time.

	   Format: date-time
	*/
	StartDateLocal strfmt.DateTime

	/* Trainer.

	   Set to 1 to mark as a trainer activity.
	*/
	Trainer *int64

	/* Type.

	   Type of activity. For example - Run, Ride etc.
	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create activity params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateActivityParams) WithDefaults() *CreateActivityParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create activity params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateActivityParams) SetDefaults() {
	var (
		hideFromHomeDefault = bool(false)
	)

	val := CreateActivityParams{
		HideFromHome: &hideFromHomeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the create activity params
func (o *CreateActivityParams) WithTimeout(timeout time.Duration) *CreateActivityParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create activity params
func (o *CreateActivityParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create activity params
func (o *CreateActivityParams) WithContext(ctx context.Context) *CreateActivityParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create activity params
func (o *CreateActivityParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create activity params
func (o *CreateActivityParams) WithHTTPClient(client *http.Client) *CreateActivityParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create activity params
func (o *CreateActivityParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCommute adds the commute to the create activity params
func (o *CreateActivityParams) WithCommute(commute *int64) *CreateActivityParams {
	o.SetCommute(commute)
	return o
}

// SetCommute adds the commute to the create activity params
func (o *CreateActivityParams) SetCommute(commute *int64) {
	o.Commute = commute
}

// WithDescription adds the description to the create activity params
func (o *CreateActivityParams) WithDescription(description *string) *CreateActivityParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the create activity params
func (o *CreateActivityParams) SetDescription(description *string) {
	o.Description = description
}

// WithDistance adds the distance to the create activity params
func (o *CreateActivityParams) WithDistance(distance *float32) *CreateActivityParams {
	o.SetDistance(distance)
	return o
}

// SetDistance adds the distance to the create activity params
func (o *CreateActivityParams) SetDistance(distance *float32) {
	o.Distance = distance
}

// WithElapsedTime adds the elapsedTime to the create activity params
func (o *CreateActivityParams) WithElapsedTime(elapsedTime int64) *CreateActivityParams {
	o.SetElapsedTime(elapsedTime)
	return o
}

// SetElapsedTime adds the elapsedTime to the create activity params
func (o *CreateActivityParams) SetElapsedTime(elapsedTime int64) {
	o.ElapsedTime = elapsedTime
}

// WithHideFromHome adds the hideFromHome to the create activity params
func (o *CreateActivityParams) WithHideFromHome(hideFromHome *bool) *CreateActivityParams {
	o.SetHideFromHome(hideFromHome)
	return o
}

// SetHideFromHome adds the hideFromHome to the create activity params
func (o *CreateActivityParams) SetHideFromHome(hideFromHome *bool) {
	o.HideFromHome = hideFromHome
}

// WithName adds the name to the create activity params
func (o *CreateActivityParams) WithName(name string) *CreateActivityParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the create activity params
func (o *CreateActivityParams) SetName(name string) {
	o.Name = name
}

// WithSportType adds the sportType to the create activity params
func (o *CreateActivityParams) WithSportType(sportType string) *CreateActivityParams {
	o.SetSportType(sportType)
	return o
}

// SetSportType adds the sportType to the create activity params
func (o *CreateActivityParams) SetSportType(sportType string) {
	o.SportType = sportType
}

// WithStartDateLocal adds the startDateLocal to the create activity params
func (o *CreateActivityParams) WithStartDateLocal(startDateLocal strfmt.DateTime) *CreateActivityParams {
	o.SetStartDateLocal(startDateLocal)
	return o
}

// SetStartDateLocal adds the startDateLocal to the create activity params
func (o *CreateActivityParams) SetStartDateLocal(startDateLocal strfmt.DateTime) {
	o.StartDateLocal = startDateLocal
}

// WithTrainer adds the trainer to the create activity params
func (o *CreateActivityParams) WithTrainer(trainer *int64) *CreateActivityParams {
	o.SetTrainer(trainer)
	return o
}

// SetTrainer adds the trainer to the create activity params
func (o *CreateActivityParams) SetTrainer(trainer *int64) {
	o.Trainer = trainer
}

// WithType adds the typeVar to the create activity params
func (o *CreateActivityParams) WithType(typeVar *string) *CreateActivityParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the create activity params
func (o *CreateActivityParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *CreateActivityParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Commute != nil {

		// form param commute
		var frCommute int64
		if o.Commute != nil {
			frCommute = *o.Commute
		}
		fCommute := swag.FormatInt64(frCommute)
		if fCommute != "" {
			if err := r.SetFormParam("commute", fCommute); err != nil {
				return err
			}
		}
	}

	if o.Description != nil {

		// form param description
		var frDescription string
		if o.Description != nil {
			frDescription = *o.Description
		}
		fDescription := frDescription
		if fDescription != "" {
			if err := r.SetFormParam("description", fDescription); err != nil {
				return err
			}
		}
	}

	if o.Distance != nil {

		// form param distance
		var frDistance float32
		if o.Distance != nil {
			frDistance = *o.Distance
		}
		fDistance := swag.FormatFloat32(frDistance)
		if fDistance != "" {
			if err := r.SetFormParam("distance", fDistance); err != nil {
				return err
			}
		}
	}

	// form param elapsed_time
	frElapsedTime := o.ElapsedTime
	fElapsedTime := swag.FormatInt64(frElapsedTime)
	if fElapsedTime != "" {
		if err := r.SetFormParam("elapsed_time", fElapsedTime); err != nil {
			return err
		}
	}

	if o.HideFromHome != nil {

		// form param hide_from_home
		var frHideFromHome bool
		if o.HideFromHome != nil {
			frHideFromHome = *o.HideFromHome
		}
		fHideFromHome := swag.FormatBool(frHideFromHome)
		if fHideFromHome != "" {
			if err := r.SetFormParam("hide_from_home", fHideFromHome); err != nil {
				return err
			}
		}
	}

	// form param name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("name", fName); err != nil {
			return err
		}
	}

	// form param sport_type
	frSportType := o.SportType
	fSportType := frSportType
	if fSportType != "" {
		if err := r.SetFormParam("sport_type", fSportType); err != nil {
			return err
		}
	}

	// form param start_date_local
	frStartDateLocal := o.StartDateLocal
	fStartDateLocal := frStartDateLocal.String()
	if fStartDateLocal != "" {
		if err := r.SetFormParam("start_date_local", fStartDateLocal); err != nil {
			return err
		}
	}

	if o.Trainer != nil {

		// form param trainer
		var frTrainer int64
		if o.Trainer != nil {
			frTrainer = *o.Trainer
		}
		fTrainer := swag.FormatInt64(frTrainer)
		if fTrainer != "" {
			if err := r.SetFormParam("trainer", fTrainer); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// form param type
		var frType string
		if o.Type != nil {
			frType = *o.Type
		}
		fType := frType
		if fType != "" {
			if err := r.SetFormParam("type", fType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
