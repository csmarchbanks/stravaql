// Code generated by go-swagger; DO NOT EDIT.

package streams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new streams API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for streams API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetActivityStreams(params *GetActivityStreamsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetActivityStreamsOK, error)

	GetRouteStreams(params *GetRouteStreamsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRouteStreamsOK, error)

	GetSegmentEffortStreams(params *GetSegmentEffortStreamsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSegmentEffortStreamsOK, error)

	GetSegmentStreams(params *GetSegmentStreamsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSegmentStreamsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetActivityStreams gets activity streams

  Returns the given activity's streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
*/
func (a *Client) GetActivityStreams(params *GetActivityStreamsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetActivityStreamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActivityStreamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getActivityStreams",
		Method:             "GET",
		PathPattern:        "/activities/{id}/streams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetActivityStreamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActivityStreamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetActivityStreamsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetRouteStreams gets route streams

  Returns the given route's streams. Requires read_all scope for private routes.
*/
func (a *Client) GetRouteStreams(params *GetRouteStreamsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRouteStreamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRouteStreamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRouteStreams",
		Method:             "GET",
		PathPattern:        "/routes/{id}/streams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRouteStreamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRouteStreamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRouteStreamsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetSegmentEffortStreams gets segment effort streams

  Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
*/
func (a *Client) GetSegmentEffortStreams(params *GetSegmentEffortStreamsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSegmentEffortStreamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSegmentEffortStreamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSegmentEffortStreams",
		Method:             "GET",
		PathPattern:        "/segment_efforts/{id}/streams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSegmentEffortStreamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSegmentEffortStreamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSegmentEffortStreamsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetSegmentStreams gets segment streams

  Returns the given segment's streams. Requires read_all scope for private segments.
*/
func (a *Client) GetSegmentStreams(params *GetSegmentStreamsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSegmentStreamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSegmentStreamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSegmentStreams",
		Method:             "GET",
		PathPattern:        "/segments/{id}/streams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSegmentStreamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSegmentStreamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSegmentStreamsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
