// Code generated by go-swagger; DO NOT EDIT.

package uploads

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCreateUploadParams creates a new CreateUploadParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateUploadParams() *CreateUploadParams {
	return &CreateUploadParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateUploadParamsWithTimeout creates a new CreateUploadParams object
// with the ability to set a timeout on a request.
func NewCreateUploadParamsWithTimeout(timeout time.Duration) *CreateUploadParams {
	return &CreateUploadParams{
		timeout: timeout,
	}
}

// NewCreateUploadParamsWithContext creates a new CreateUploadParams object
// with the ability to set a context for a request.
func NewCreateUploadParamsWithContext(ctx context.Context) *CreateUploadParams {
	return &CreateUploadParams{
		Context: ctx,
	}
}

// NewCreateUploadParamsWithHTTPClient creates a new CreateUploadParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateUploadParamsWithHTTPClient(client *http.Client) *CreateUploadParams {
	return &CreateUploadParams{
		HTTPClient: client,
	}
}

/* CreateUploadParams contains all the parameters to send to the API endpoint
   for the create upload operation.

   Typically these are written to a http.Request.
*/
type CreateUploadParams struct {

	/* Commute.

	   Whether the resulting activity should be tagged as a commute.
	*/
	Commute *string

	/* DataType.

	   The format of the uploaded file.
	*/
	DataType *string

	/* Description.

	   The desired description of the resulting activity.
	*/
	Description *string

	/* ExternalID.

	   The desired external identifier of the resulting activity.
	*/
	ExternalID *string

	/* File.

	   The uploaded file.
	*/
	File runtime.NamedReadCloser

	/* Name.

	   The desired name of the resulting activity.
	*/
	Name *string

	/* Trainer.

	   Whether the resulting activity should be marked as having been performed on a trainer.
	*/
	Trainer *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create upload params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateUploadParams) WithDefaults() *CreateUploadParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create upload params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateUploadParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create upload params
func (o *CreateUploadParams) WithTimeout(timeout time.Duration) *CreateUploadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create upload params
func (o *CreateUploadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create upload params
func (o *CreateUploadParams) WithContext(ctx context.Context) *CreateUploadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create upload params
func (o *CreateUploadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create upload params
func (o *CreateUploadParams) WithHTTPClient(client *http.Client) *CreateUploadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create upload params
func (o *CreateUploadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCommute adds the commute to the create upload params
func (o *CreateUploadParams) WithCommute(commute *string) *CreateUploadParams {
	o.SetCommute(commute)
	return o
}

// SetCommute adds the commute to the create upload params
func (o *CreateUploadParams) SetCommute(commute *string) {
	o.Commute = commute
}

// WithDataType adds the dataType to the create upload params
func (o *CreateUploadParams) WithDataType(dataType *string) *CreateUploadParams {
	o.SetDataType(dataType)
	return o
}

// SetDataType adds the dataType to the create upload params
func (o *CreateUploadParams) SetDataType(dataType *string) {
	o.DataType = dataType
}

// WithDescription adds the description to the create upload params
func (o *CreateUploadParams) WithDescription(description *string) *CreateUploadParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the create upload params
func (o *CreateUploadParams) SetDescription(description *string) {
	o.Description = description
}

// WithExternalID adds the externalID to the create upload params
func (o *CreateUploadParams) WithExternalID(externalID *string) *CreateUploadParams {
	o.SetExternalID(externalID)
	return o
}

// SetExternalID adds the externalId to the create upload params
func (o *CreateUploadParams) SetExternalID(externalID *string) {
	o.ExternalID = externalID
}

// WithFile adds the file to the create upload params
func (o *CreateUploadParams) WithFile(file runtime.NamedReadCloser) *CreateUploadParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the create upload params
func (o *CreateUploadParams) SetFile(file runtime.NamedReadCloser) {
	o.File = file
}

// WithName adds the name to the create upload params
func (o *CreateUploadParams) WithName(name *string) *CreateUploadParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the create upload params
func (o *CreateUploadParams) SetName(name *string) {
	o.Name = name
}

// WithTrainer adds the trainer to the create upload params
func (o *CreateUploadParams) WithTrainer(trainer *string) *CreateUploadParams {
	o.SetTrainer(trainer)
	return o
}

// SetTrainer adds the trainer to the create upload params
func (o *CreateUploadParams) SetTrainer(trainer *string) {
	o.Trainer = trainer
}

// WriteToRequest writes these params to a swagger request
func (o *CreateUploadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Commute != nil {

		// form param commute
		var frCommute string
		if o.Commute != nil {
			frCommute = *o.Commute
		}
		fCommute := frCommute
		if fCommute != "" {
			if err := r.SetFormParam("commute", fCommute); err != nil {
				return err
			}
		}
	}

	if o.DataType != nil {

		// form param data_type
		var frDataType string
		if o.DataType != nil {
			frDataType = *o.DataType
		}
		fDataType := frDataType
		if fDataType != "" {
			if err := r.SetFormParam("data_type", fDataType); err != nil {
				return err
			}
		}
	}

	if o.Description != nil {

		// form param description
		var frDescription string
		if o.Description != nil {
			frDescription = *o.Description
		}
		fDescription := frDescription
		if fDescription != "" {
			if err := r.SetFormParam("description", fDescription); err != nil {
				return err
			}
		}
	}

	if o.ExternalID != nil {

		// form param external_id
		var frExternalID string
		if o.ExternalID != nil {
			frExternalID = *o.ExternalID
		}
		fExternalID := frExternalID
		if fExternalID != "" {
			if err := r.SetFormParam("external_id", fExternalID); err != nil {
				return err
			}
		}
	}

	if o.File != nil {

		if o.File != nil {
			// form file param file
			if err := r.SetFileParam("file", o.File); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// form param name
		var frName string
		if o.Name != nil {
			frName = *o.Name
		}
		fName := frName
		if fName != "" {
			if err := r.SetFormParam("name", fName); err != nil {
				return err
			}
		}
	}

	if o.Trainer != nil {

		// form param trainer
		var frTrainer string
		if o.Trainer != nil {
			frTrainer = *o.Trainer
		}
		fTrainer := frTrainer
		if fTrainer != "" {
			if err := r.SetFormParam("trainer", fTrainer); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
