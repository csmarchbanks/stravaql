// Code generated by go-swagger; DO NOT EDIT.

package segment_efforts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetEffortsBySegmentIDParams creates a new GetEffortsBySegmentIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetEffortsBySegmentIDParams() *GetEffortsBySegmentIDParams {
	return &GetEffortsBySegmentIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetEffortsBySegmentIDParamsWithTimeout creates a new GetEffortsBySegmentIDParams object
// with the ability to set a timeout on a request.
func NewGetEffortsBySegmentIDParamsWithTimeout(timeout time.Duration) *GetEffortsBySegmentIDParams {
	return &GetEffortsBySegmentIDParams{
		timeout: timeout,
	}
}

// NewGetEffortsBySegmentIDParamsWithContext creates a new GetEffortsBySegmentIDParams object
// with the ability to set a context for a request.
func NewGetEffortsBySegmentIDParamsWithContext(ctx context.Context) *GetEffortsBySegmentIDParams {
	return &GetEffortsBySegmentIDParams{
		Context: ctx,
	}
}

// NewGetEffortsBySegmentIDParamsWithHTTPClient creates a new GetEffortsBySegmentIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetEffortsBySegmentIDParamsWithHTTPClient(client *http.Client) *GetEffortsBySegmentIDParams {
	return &GetEffortsBySegmentIDParams{
		HTTPClient: client,
	}
}

/* GetEffortsBySegmentIDParams contains all the parameters to send to the API endpoint
   for the get efforts by segment Id operation.

   Typically these are written to a http.Request.
*/
type GetEffortsBySegmentIDParams struct {

	/* EndDateLocal.

	   ISO 8601 formatted date time.

	   Format: date-time
	*/
	EndDateLocal *strfmt.DateTime

	/* PerPage.

	   Number of items per page. Defaults to 30.

	   Default: 30
	*/
	PerPage *int64

	/* SegmentID.

	   The identifier of the segment.
	*/
	SegmentID int64

	/* StartDateLocal.

	   ISO 8601 formatted date time.

	   Format: date-time
	*/
	StartDateLocal *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get efforts by segment Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetEffortsBySegmentIDParams) WithDefaults() *GetEffortsBySegmentIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get efforts by segment Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetEffortsBySegmentIDParams) SetDefaults() {
	var (
		perPageDefault = int64(30)
	)

	val := GetEffortsBySegmentIDParams{
		PerPage: &perPageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get efforts by segment Id params
func (o *GetEffortsBySegmentIDParams) WithTimeout(timeout time.Duration) *GetEffortsBySegmentIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get efforts by segment Id params
func (o *GetEffortsBySegmentIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get efforts by segment Id params
func (o *GetEffortsBySegmentIDParams) WithContext(ctx context.Context) *GetEffortsBySegmentIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get efforts by segment Id params
func (o *GetEffortsBySegmentIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get efforts by segment Id params
func (o *GetEffortsBySegmentIDParams) WithHTTPClient(client *http.Client) *GetEffortsBySegmentIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get efforts by segment Id params
func (o *GetEffortsBySegmentIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndDateLocal adds the endDateLocal to the get efforts by segment Id params
func (o *GetEffortsBySegmentIDParams) WithEndDateLocal(endDateLocal *strfmt.DateTime) *GetEffortsBySegmentIDParams {
	o.SetEndDateLocal(endDateLocal)
	return o
}

// SetEndDateLocal adds the endDateLocal to the get efforts by segment Id params
func (o *GetEffortsBySegmentIDParams) SetEndDateLocal(endDateLocal *strfmt.DateTime) {
	o.EndDateLocal = endDateLocal
}

// WithPerPage adds the perPage to the get efforts by segment Id params
func (o *GetEffortsBySegmentIDParams) WithPerPage(perPage *int64) *GetEffortsBySegmentIDParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the get efforts by segment Id params
func (o *GetEffortsBySegmentIDParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WithSegmentID adds the segmentID to the get efforts by segment Id params
func (o *GetEffortsBySegmentIDParams) WithSegmentID(segmentID int64) *GetEffortsBySegmentIDParams {
	o.SetSegmentID(segmentID)
	return o
}

// SetSegmentID adds the segmentId to the get efforts by segment Id params
func (o *GetEffortsBySegmentIDParams) SetSegmentID(segmentID int64) {
	o.SegmentID = segmentID
}

// WithStartDateLocal adds the startDateLocal to the get efforts by segment Id params
func (o *GetEffortsBySegmentIDParams) WithStartDateLocal(startDateLocal *strfmt.DateTime) *GetEffortsBySegmentIDParams {
	o.SetStartDateLocal(startDateLocal)
	return o
}

// SetStartDateLocal adds the startDateLocal to the get efforts by segment Id params
func (o *GetEffortsBySegmentIDParams) SetStartDateLocal(startDateLocal *strfmt.DateTime) {
	o.StartDateLocal = startDateLocal
}

// WriteToRequest writes these params to a swagger request
func (o *GetEffortsBySegmentIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndDateLocal != nil {

		// query param end_date_local
		var qrEndDateLocal strfmt.DateTime

		if o.EndDateLocal != nil {
			qrEndDateLocal = *o.EndDateLocal
		}
		qEndDateLocal := qrEndDateLocal.String()
		if qEndDateLocal != "" {

			if err := r.SetQueryParam("end_date_local", qEndDateLocal); err != nil {
				return err
			}
		}
	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64

		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {

			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}
	}

	// query param segment_id
	qrSegmentID := o.SegmentID
	qSegmentID := swag.FormatInt64(qrSegmentID)
	if qSegmentID != "" {

		if err := r.SetQueryParam("segment_id", qSegmentID); err != nil {
			return err
		}
	}

	if o.StartDateLocal != nil {

		// query param start_date_local
		var qrStartDateLocal strfmt.DateTime

		if o.StartDateLocal != nil {
			qrStartDateLocal = *o.StartDateLocal
		}
		qStartDateLocal := qrStartDateLocal.String()
		if qStartDateLocal != "" {

			if err := r.SetQueryParam("start_date_local", qStartDateLocal); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
