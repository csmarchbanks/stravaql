// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DetailedSegmentEffort detailed segment effort
//
// swagger:model detailedSegmentEffort
type DetailedSegmentEffort struct {
	SummarySegmentEffort

	// activity
	Activity *MetaActivity `json:"activity,omitempty"`

	// athlete
	Athlete *MetaAthlete `json:"athlete,omitempty"`

	// The effort's average cadence
	AverageCadence float32 `json:"average_cadence,omitempty"`

	// The heart heart rate of the athlete during this effort
	AverageHeartrate float32 `json:"average_heartrate,omitempty"`

	// The average wattage of this effort
	AverageWatts float32 `json:"average_watts,omitempty"`

	// For riding efforts, whether the wattage was reported by a dedicated recording device
	DeviceWatts bool `json:"device_watts,omitempty"`

	// The end index of this effort in its activity's stream
	EndIndex int64 `json:"end_index,omitempty"`

	// Whether this effort should be hidden when viewed within an activity
	Hidden bool `json:"hidden,omitempty"`

	// The rank of the effort on the global leaderboard if it belongs in the top 10 at the time of upload
	// Maximum: 10
	// Minimum: 1
	KomRank int64 `json:"kom_rank,omitempty"`

	// The maximum heart rate of the athlete during this effort
	MaxHeartrate float32 `json:"max_heartrate,omitempty"`

	// The effort's moving time
	MovingTime int64 `json:"moving_time,omitempty"`

	// The name of the segment on which this effort was performed
	Name string `json:"name,omitempty"`

	// The rank of the effort on the athlete's leaderboard if it belongs in the top 3 at the time of upload
	// Maximum: 3
	// Minimum: 1
	PrRank int64 `json:"pr_rank,omitempty"`

	// segment
	Segment *SummarySegment `json:"segment,omitempty"`

	// The start index of this effort in its activity's stream
	StartIndex int64 `json:"start_index,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DetailedSegmentEffort) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 SummarySegmentEffort
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.SummarySegmentEffort = aO0

	// AO1
	var dataAO1 struct {
		Activity *MetaActivity `json:"activity,omitempty"`

		Athlete *MetaAthlete `json:"athlete,omitempty"`

		AverageCadence float32 `json:"average_cadence,omitempty"`

		AverageHeartrate float32 `json:"average_heartrate,omitempty"`

		AverageWatts float32 `json:"average_watts,omitempty"`

		DeviceWatts bool `json:"device_watts,omitempty"`

		EndIndex int64 `json:"end_index,omitempty"`

		Hidden bool `json:"hidden,omitempty"`

		KomRank int64 `json:"kom_rank,omitempty"`

		MaxHeartrate float32 `json:"max_heartrate,omitempty"`

		MovingTime int64 `json:"moving_time,omitempty"`

		Name string `json:"name,omitempty"`

		PrRank int64 `json:"pr_rank,omitempty"`

		Segment *SummarySegment `json:"segment,omitempty"`

		StartIndex int64 `json:"start_index,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Activity = dataAO1.Activity

	m.Athlete = dataAO1.Athlete

	m.AverageCadence = dataAO1.AverageCadence

	m.AverageHeartrate = dataAO1.AverageHeartrate

	m.AverageWatts = dataAO1.AverageWatts

	m.DeviceWatts = dataAO1.DeviceWatts

	m.EndIndex = dataAO1.EndIndex

	m.Hidden = dataAO1.Hidden

	m.KomRank = dataAO1.KomRank

	m.MaxHeartrate = dataAO1.MaxHeartrate

	m.MovingTime = dataAO1.MovingTime

	m.Name = dataAO1.Name

	m.PrRank = dataAO1.PrRank

	m.Segment = dataAO1.Segment

	m.StartIndex = dataAO1.StartIndex

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DetailedSegmentEffort) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.SummarySegmentEffort)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Activity *MetaActivity `json:"activity,omitempty"`

		Athlete *MetaAthlete `json:"athlete,omitempty"`

		AverageCadence float32 `json:"average_cadence,omitempty"`

		AverageHeartrate float32 `json:"average_heartrate,omitempty"`

		AverageWatts float32 `json:"average_watts,omitempty"`

		DeviceWatts bool `json:"device_watts,omitempty"`

		EndIndex int64 `json:"end_index,omitempty"`

		Hidden bool `json:"hidden,omitempty"`

		KomRank int64 `json:"kom_rank,omitempty"`

		MaxHeartrate float32 `json:"max_heartrate,omitempty"`

		MovingTime int64 `json:"moving_time,omitempty"`

		Name string `json:"name,omitempty"`

		PrRank int64 `json:"pr_rank,omitempty"`

		Segment *SummarySegment `json:"segment,omitempty"`

		StartIndex int64 `json:"start_index,omitempty"`
	}

	dataAO1.Activity = m.Activity

	dataAO1.Athlete = m.Athlete

	dataAO1.AverageCadence = m.AverageCadence

	dataAO1.AverageHeartrate = m.AverageHeartrate

	dataAO1.AverageWatts = m.AverageWatts

	dataAO1.DeviceWatts = m.DeviceWatts

	dataAO1.EndIndex = m.EndIndex

	dataAO1.Hidden = m.Hidden

	dataAO1.KomRank = m.KomRank

	dataAO1.MaxHeartrate = m.MaxHeartrate

	dataAO1.MovingTime = m.MovingTime

	dataAO1.Name = m.Name

	dataAO1.PrRank = m.PrRank

	dataAO1.Segment = m.Segment

	dataAO1.StartIndex = m.StartIndex

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this detailed segment effort
func (m *DetailedSegmentEffort) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SummarySegmentEffort
	if err := m.SummarySegmentEffort.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActivity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAthlete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKomRank(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrRank(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSegment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DetailedSegmentEffort) validateActivity(formats strfmt.Registry) error {

	if swag.IsZero(m.Activity) { // not required
		return nil
	}

	if m.Activity != nil {
		if err := m.Activity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activity")
			}
			return err
		}
	}

	return nil
}

func (m *DetailedSegmentEffort) validateAthlete(formats strfmt.Registry) error {

	if swag.IsZero(m.Athlete) { // not required
		return nil
	}

	if m.Athlete != nil {
		if err := m.Athlete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("athlete")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("athlete")
			}
			return err
		}
	}

	return nil
}

func (m *DetailedSegmentEffort) validateKomRank(formats strfmt.Registry) error {

	if swag.IsZero(m.KomRank) { // not required
		return nil
	}

	if err := validate.MinimumInt("kom_rank", "body", m.KomRank, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("kom_rank", "body", m.KomRank, 10, false); err != nil {
		return err
	}

	return nil
}

func (m *DetailedSegmentEffort) validatePrRank(formats strfmt.Registry) error {

	if swag.IsZero(m.PrRank) { // not required
		return nil
	}

	if err := validate.MinimumInt("pr_rank", "body", m.PrRank, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("pr_rank", "body", m.PrRank, 3, false); err != nil {
		return err
	}

	return nil
}

func (m *DetailedSegmentEffort) validateSegment(formats strfmt.Registry) error {

	if swag.IsZero(m.Segment) { // not required
		return nil
	}

	if m.Segment != nil {
		if err := m.Segment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("segment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("segment")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this detailed segment effort based on the context it is used
func (m *DetailedSegmentEffort) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SummarySegmentEffort
	if err := m.SummarySegmentEffort.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateActivity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAthlete(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSegment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DetailedSegmentEffort) contextValidateActivity(ctx context.Context, formats strfmt.Registry) error {

	if m.Activity != nil {
		if err := m.Activity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activity")
			}
			return err
		}
	}

	return nil
}

func (m *DetailedSegmentEffort) contextValidateAthlete(ctx context.Context, formats strfmt.Registry) error {

	if m.Athlete != nil {
		if err := m.Athlete.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("athlete")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("athlete")
			}
			return err
		}
	}

	return nil
}

func (m *DetailedSegmentEffort) contextValidateSegment(ctx context.Context, formats strfmt.Registry) error {

	if m.Segment != nil {
		if err := m.Segment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("segment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("segment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DetailedSegmentEffort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DetailedSegmentEffort) UnmarshalBinary(b []byte) error {
	var res DetailedSegmentEffort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
