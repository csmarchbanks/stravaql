// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DetailedClub detailed club
//
// swagger:model detailedClub
type DetailedClub struct {
	SummaryClub

	// Whether the currently logged-in athlete is an administrator of this club.
	Admin bool `json:"admin,omitempty"`

	// The number of athletes in the club that the logged-in athlete follows.
	FollowingCount int64 `json:"following_count,omitempty"`

	// The membership status of the logged-in athlete.
	// Enum: [member pending]
	Membership string `json:"membership,omitempty"`

	// Whether the currently logged-in athlete is the owner of this club.
	Owner bool `json:"owner,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DetailedClub) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 SummaryClub
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.SummaryClub = aO0

	// AO1
	var dataAO1 struct {
		Admin bool `json:"admin,omitempty"`

		FollowingCount int64 `json:"following_count,omitempty"`

		Membership string `json:"membership,omitempty"`

		Owner bool `json:"owner,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Admin = dataAO1.Admin

	m.FollowingCount = dataAO1.FollowingCount

	m.Membership = dataAO1.Membership

	m.Owner = dataAO1.Owner

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DetailedClub) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.SummaryClub)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Admin bool `json:"admin,omitempty"`

		FollowingCount int64 `json:"following_count,omitempty"`

		Membership string `json:"membership,omitempty"`

		Owner bool `json:"owner,omitempty"`
	}

	dataAO1.Admin = m.Admin

	dataAO1.FollowingCount = m.FollowingCount

	dataAO1.Membership = m.Membership

	dataAO1.Owner = m.Owner

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this detailed club
func (m *DetailedClub) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SummaryClub
	if err := m.SummaryClub.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembership(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var detailedClubTypeMembershipPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["member","pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		detailedClubTypeMembershipPropEnum = append(detailedClubTypeMembershipPropEnum, v)
	}
}

// property enum
func (m *DetailedClub) validateMembershipEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, detailedClubTypeMembershipPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DetailedClub) validateMembership(formats strfmt.Registry) error {

	if swag.IsZero(m.Membership) { // not required
		return nil
	}

	// value enum
	if err := m.validateMembershipEnum("membership", "body", m.Membership); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this detailed club based on the context it is used
func (m *DetailedClub) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SummaryClub
	if err := m.SummaryClub.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DetailedClub) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DetailedClub) UnmarshalBinary(b []byte) error {
	var res DetailedClub
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
