// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SummaryAthlete summary athlete
//
// swagger:model summaryAthlete
type SummaryAthlete struct {
	MetaAthlete

	// The athlete's city.
	City string `json:"city,omitempty"`

	// The athlete's country.
	Country string `json:"country,omitempty"`

	// The time at which the athlete was created.
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// The athlete's first name.
	Firstname string `json:"firstname,omitempty"`

	// The athlete's last name.
	Lastname string `json:"lastname,omitempty"`

	// Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.
	Premium bool `json:"premium,omitempty"`

	// URL to a 124x124 pixel profile picture.
	Profile string `json:"profile,omitempty"`

	// URL to a 62x62 pixel profile picture.
	ProfileMedium string `json:"profile_medium,omitempty"`

	// Resource state, indicates level of detail. Possible values: 1 -> "meta", 2 -> "summary", 3 -> "detail"
	ResourceState int64 `json:"resource_state,omitempty"`

	// The athlete's sex.
	// Enum: [M F]
	Sex string `json:"sex,omitempty"`

	// The athlete's state or geographical region.
	State string `json:"state,omitempty"`

	// Whether the athlete has any Summit subscription.
	Summit bool `json:"summit,omitempty"`

	// The time at which the athlete was last updated.
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SummaryAthlete) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MetaAthlete
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MetaAthlete = aO0

	// AO1
	var dataAO1 struct {
		City string `json:"city,omitempty"`

		Country string `json:"country,omitempty"`

		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		Firstname string `json:"firstname,omitempty"`

		Lastname string `json:"lastname,omitempty"`

		Premium bool `json:"premium,omitempty"`

		Profile string `json:"profile,omitempty"`

		ProfileMedium string `json:"profile_medium,omitempty"`

		ResourceState int64 `json:"resource_state,omitempty"`

		Sex string `json:"sex,omitempty"`

		State string `json:"state,omitempty"`

		Summit bool `json:"summit,omitempty"`

		UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.City = dataAO1.City

	m.Country = dataAO1.Country

	m.CreatedAt = dataAO1.CreatedAt

	m.Firstname = dataAO1.Firstname

	m.Lastname = dataAO1.Lastname

	m.Premium = dataAO1.Premium

	m.Profile = dataAO1.Profile

	m.ProfileMedium = dataAO1.ProfileMedium

	m.ResourceState = dataAO1.ResourceState

	m.Sex = dataAO1.Sex

	m.State = dataAO1.State

	m.Summit = dataAO1.Summit

	m.UpdatedAt = dataAO1.UpdatedAt

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SummaryAthlete) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MetaAthlete)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		City string `json:"city,omitempty"`

		Country string `json:"country,omitempty"`

		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		Firstname string `json:"firstname,omitempty"`

		Lastname string `json:"lastname,omitempty"`

		Premium bool `json:"premium,omitempty"`

		Profile string `json:"profile,omitempty"`

		ProfileMedium string `json:"profile_medium,omitempty"`

		ResourceState int64 `json:"resource_state,omitempty"`

		Sex string `json:"sex,omitempty"`

		State string `json:"state,omitempty"`

		Summit bool `json:"summit,omitempty"`

		UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
	}

	dataAO1.City = m.City

	dataAO1.Country = m.Country

	dataAO1.CreatedAt = m.CreatedAt

	dataAO1.Firstname = m.Firstname

	dataAO1.Lastname = m.Lastname

	dataAO1.Premium = m.Premium

	dataAO1.Profile = m.Profile

	dataAO1.ProfileMedium = m.ProfileMedium

	dataAO1.ResourceState = m.ResourceState

	dataAO1.Sex = m.Sex

	dataAO1.State = m.State

	dataAO1.Summit = m.Summit

	dataAO1.UpdatedAt = m.UpdatedAt

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this summary athlete
func (m *SummaryAthlete) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MetaAthlete
	if err := m.MetaAthlete.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SummaryAthlete) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var summaryAthleteTypeSexPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["M","F"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		summaryAthleteTypeSexPropEnum = append(summaryAthleteTypeSexPropEnum, v)
	}
}

// property enum
func (m *SummaryAthlete) validateSexEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, summaryAthleteTypeSexPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SummaryAthlete) validateSex(formats strfmt.Registry) error {

	if swag.IsZero(m.Sex) { // not required
		return nil
	}

	// value enum
	if err := m.validateSexEnum("sex", "body", m.Sex); err != nil {
		return err
	}

	return nil
}

func (m *SummaryAthlete) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this summary athlete based on the context it is used
func (m *SummaryAthlete) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MetaAthlete
	if err := m.MetaAthlete.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *SummaryAthlete) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SummaryAthlete) UnmarshalBinary(b []byte) error {
	var res SummaryAthlete
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
