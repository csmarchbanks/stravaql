// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SummaryPRSegmentEffort summary p r segment effort
//
// swagger:model summaryPRSegmentEffort
type SummaryPRSegmentEffort struct {

	// Number of efforts by the authenticated athlete on this segment.
	EffortCount int64 `json:"effort_count,omitempty"`

	// The unique identifier of the activity related to the PR effort.
	PrActivityID int64 `json:"pr_activity_id,omitempty"`

	// The time at which the PR effort was started.
	// Format: date-time
	PrDate strfmt.DateTime `json:"pr_date,omitempty"`

	// The elapsed time ot the PR effort.
	PrElapsedTime int64 `json:"pr_elapsed_time,omitempty"`
}

// Validate validates this summary p r segment effort
func (m *SummaryPRSegmentEffort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SummaryPRSegmentEffort) validatePrDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PrDate) { // not required
		return nil
	}

	if err := validate.FormatOf("pr_date", "body", "date-time", m.PrDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this summary p r segment effort based on context it is used
func (m *SummaryPRSegmentEffort) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SummaryPRSegmentEffort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SummaryPRSegmentEffort) UnmarshalBinary(b []byte) error {
	var res SummaryPRSegmentEffort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
