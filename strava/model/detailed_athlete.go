// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DetailedAthlete detailed athlete
//
// swagger:model detailedAthlete
type DetailedAthlete struct {
	SummaryAthlete

	// The athlete's bikes.
	Bikes []*SummaryGear `json:"bikes"`

	// The athlete's clubs.
	Clubs []*SummaryClub `json:"clubs"`

	// The athlete's follower count.
	FollowerCount int64 `json:"follower_count,omitempty"`

	// The athlete's friend count.
	FriendCount int64 `json:"friend_count,omitempty"`

	// The athlete's FTP (Functional Threshold Power).
	Ftp int64 `json:"ftp,omitempty"`

	// The athlete's preferred unit system.
	// Enum: [feet meters]
	MeasurementPreference string `json:"measurement_preference,omitempty"`

	// The athlete's shoes.
	Shoes []*SummaryGear `json:"shoes"`

	// The athlete's weight.
	Weight float32 `json:"weight,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *DetailedAthlete) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 SummaryAthlete
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.SummaryAthlete = aO0

	// AO1
	var dataAO1 struct {
		Bikes []*SummaryGear `json:"bikes"`

		Clubs []*SummaryClub `json:"clubs"`

		FollowerCount int64 `json:"follower_count,omitempty"`

		FriendCount int64 `json:"friend_count,omitempty"`

		Ftp int64 `json:"ftp,omitempty"`

		MeasurementPreference string `json:"measurement_preference,omitempty"`

		Shoes []*SummaryGear `json:"shoes"`

		Weight float32 `json:"weight,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Bikes = dataAO1.Bikes

	m.Clubs = dataAO1.Clubs

	m.FollowerCount = dataAO1.FollowerCount

	m.FriendCount = dataAO1.FriendCount

	m.Ftp = dataAO1.Ftp

	m.MeasurementPreference = dataAO1.MeasurementPreference

	m.Shoes = dataAO1.Shoes

	m.Weight = dataAO1.Weight

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m DetailedAthlete) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.SummaryAthlete)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Bikes []*SummaryGear `json:"bikes"`

		Clubs []*SummaryClub `json:"clubs"`

		FollowerCount int64 `json:"follower_count,omitempty"`

		FriendCount int64 `json:"friend_count,omitempty"`

		Ftp int64 `json:"ftp,omitempty"`

		MeasurementPreference string `json:"measurement_preference,omitempty"`

		Shoes []*SummaryGear `json:"shoes"`

		Weight float32 `json:"weight,omitempty"`
	}

	dataAO1.Bikes = m.Bikes

	dataAO1.Clubs = m.Clubs

	dataAO1.FollowerCount = m.FollowerCount

	dataAO1.FriendCount = m.FriendCount

	dataAO1.Ftp = m.Ftp

	dataAO1.MeasurementPreference = m.MeasurementPreference

	dataAO1.Shoes = m.Shoes

	dataAO1.Weight = m.Weight

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this detailed athlete
func (m *DetailedAthlete) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SummaryAthlete
	if err := m.SummaryAthlete.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBikes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClubs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeasurementPreference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShoes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DetailedAthlete) validateBikes(formats strfmt.Registry) error {

	if swag.IsZero(m.Bikes) { // not required
		return nil
	}

	for i := 0; i < len(m.Bikes); i++ {
		if swag.IsZero(m.Bikes[i]) { // not required
			continue
		}

		if m.Bikes[i] != nil {
			if err := m.Bikes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bikes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bikes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DetailedAthlete) validateClubs(formats strfmt.Registry) error {

	if swag.IsZero(m.Clubs) { // not required
		return nil
	}

	for i := 0; i < len(m.Clubs); i++ {
		if swag.IsZero(m.Clubs[i]) { // not required
			continue
		}

		if m.Clubs[i] != nil {
			if err := m.Clubs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clubs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clubs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var detailedAthleteTypeMeasurementPreferencePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["feet","meters"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		detailedAthleteTypeMeasurementPreferencePropEnum = append(detailedAthleteTypeMeasurementPreferencePropEnum, v)
	}
}

// property enum
func (m *DetailedAthlete) validateMeasurementPreferenceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, detailedAthleteTypeMeasurementPreferencePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DetailedAthlete) validateMeasurementPreference(formats strfmt.Registry) error {

	if swag.IsZero(m.MeasurementPreference) { // not required
		return nil
	}

	// value enum
	if err := m.validateMeasurementPreferenceEnum("measurement_preference", "body", m.MeasurementPreference); err != nil {
		return err
	}

	return nil
}

func (m *DetailedAthlete) validateShoes(formats strfmt.Registry) error {

	if swag.IsZero(m.Shoes) { // not required
		return nil
	}

	for i := 0; i < len(m.Shoes); i++ {
		if swag.IsZero(m.Shoes[i]) { // not required
			continue
		}

		if m.Shoes[i] != nil {
			if err := m.Shoes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shoes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shoes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this detailed athlete based on the context it is used
func (m *DetailedAthlete) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SummaryAthlete
	if err := m.SummaryAthlete.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBikes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClubs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShoes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DetailedAthlete) contextValidateBikes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Bikes); i++ {

		if m.Bikes[i] != nil {
			if err := m.Bikes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bikes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bikes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DetailedAthlete) contextValidateClubs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clubs); i++ {

		if m.Clubs[i] != nil {
			if err := m.Clubs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clubs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clubs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DetailedAthlete) contextValidateShoes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Shoes); i++ {

		if m.Shoes[i] != nil {
			if err := m.Shoes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shoes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shoes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DetailedAthlete) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DetailedAthlete) UnmarshalBinary(b []byte) error {
	var res DetailedAthlete
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
