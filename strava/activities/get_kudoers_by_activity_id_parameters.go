// Code generated by go-swagger; DO NOT EDIT.

package activities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetKudoersByActivityIDParams creates a new GetKudoersByActivityIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetKudoersByActivityIDParams() *GetKudoersByActivityIDParams {
	return &GetKudoersByActivityIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetKudoersByActivityIDParamsWithTimeout creates a new GetKudoersByActivityIDParams object
// with the ability to set a timeout on a request.
func NewGetKudoersByActivityIDParamsWithTimeout(timeout time.Duration) *GetKudoersByActivityIDParams {
	return &GetKudoersByActivityIDParams{
		timeout: timeout,
	}
}

// NewGetKudoersByActivityIDParamsWithContext creates a new GetKudoersByActivityIDParams object
// with the ability to set a context for a request.
func NewGetKudoersByActivityIDParamsWithContext(ctx context.Context) *GetKudoersByActivityIDParams {
	return &GetKudoersByActivityIDParams{
		Context: ctx,
	}
}

// NewGetKudoersByActivityIDParamsWithHTTPClient creates a new GetKudoersByActivityIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetKudoersByActivityIDParamsWithHTTPClient(client *http.Client) *GetKudoersByActivityIDParams {
	return &GetKudoersByActivityIDParams{
		HTTPClient: client,
	}
}

/* GetKudoersByActivityIDParams contains all the parameters to send to the API endpoint
   for the get kudoers by activity Id operation.

   Typically these are written to a http.Request.
*/
type GetKudoersByActivityIDParams struct {

	/* ID.

	   The identifier of the activity.

	   Format: int64
	*/
	ID int64

	/* Page.

	   Page number. Defaults to 1.
	*/
	Page *int64

	/* PerPage.

	   Number of items per page. Defaults to 30.

	   Default: 30
	*/
	PerPage *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get kudoers by activity Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetKudoersByActivityIDParams) WithDefaults() *GetKudoersByActivityIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get kudoers by activity Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetKudoersByActivityIDParams) SetDefaults() {
	var (
		perPageDefault = int64(30)
	)

	val := GetKudoersByActivityIDParams{
		PerPage: &perPageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get kudoers by activity Id params
func (o *GetKudoersByActivityIDParams) WithTimeout(timeout time.Duration) *GetKudoersByActivityIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get kudoers by activity Id params
func (o *GetKudoersByActivityIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get kudoers by activity Id params
func (o *GetKudoersByActivityIDParams) WithContext(ctx context.Context) *GetKudoersByActivityIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get kudoers by activity Id params
func (o *GetKudoersByActivityIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get kudoers by activity Id params
func (o *GetKudoersByActivityIDParams) WithHTTPClient(client *http.Client) *GetKudoersByActivityIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get kudoers by activity Id params
func (o *GetKudoersByActivityIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get kudoers by activity Id params
func (o *GetKudoersByActivityIDParams) WithID(id int64) *GetKudoersByActivityIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get kudoers by activity Id params
func (o *GetKudoersByActivityIDParams) SetID(id int64) {
	o.ID = id
}

// WithPage adds the page to the get kudoers by activity Id params
func (o *GetKudoersByActivityIDParams) WithPage(page *int64) *GetKudoersByActivityIDParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get kudoers by activity Id params
func (o *GetKudoersByActivityIDParams) SetPage(page *int64) {
	o.Page = page
}

// WithPerPage adds the perPage to the get kudoers by activity Id params
func (o *GetKudoersByActivityIDParams) WithPerPage(perPage *int64) *GetKudoersByActivityIDParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the get kudoers by activity Id params
func (o *GetKudoersByActivityIDParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WriteToRequest writes these params to a swagger request
func (o *GetKudoersByActivityIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int64

		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {

			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
