// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ActivityStats A set of rolled-up statistics and totals for an athlete
//
// swagger:model activityStats
type ActivityStats struct {

	// all ride totals
	AllRideTotals *ActivityTotal `json:"all_ride_totals,omitempty"`

	// all run totals
	AllRunTotals *ActivityTotal `json:"all_run_totals,omitempty"`

	// all swim totals
	AllSwimTotals *ActivityTotal `json:"all_swim_totals,omitempty"`

	// The highest climb ridden by the athlete.
	BiggestClimbElevationGain float64 `json:"biggest_climb_elevation_gain,omitempty"`

	// The longest distance ridden by the athlete.
	BiggestRideDistance float64 `json:"biggest_ride_distance,omitempty"`

	// recent ride totals
	RecentRideTotals *ActivityTotal `json:"recent_ride_totals,omitempty"`

	// recent run totals
	RecentRunTotals *ActivityTotal `json:"recent_run_totals,omitempty"`

	// recent swim totals
	RecentSwimTotals *ActivityTotal `json:"recent_swim_totals,omitempty"`

	// ytd ride totals
	YtdRideTotals *ActivityTotal `json:"ytd_ride_totals,omitempty"`

	// ytd run totals
	YtdRunTotals *ActivityTotal `json:"ytd_run_totals,omitempty"`

	// ytd swim totals
	YtdSwimTotals *ActivityTotal `json:"ytd_swim_totals,omitempty"`
}

// Validate validates this activity stats
func (m *ActivityStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllRideTotals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllRunTotals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllSwimTotals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecentRideTotals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecentRunTotals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecentSwimTotals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYtdRideTotals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYtdRunTotals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYtdSwimTotals(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActivityStats) validateAllRideTotals(formats strfmt.Registry) error {
	if swag.IsZero(m.AllRideTotals) { // not required
		return nil
	}

	if m.AllRideTotals != nil {
		if err := m.AllRideTotals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("all_ride_totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("all_ride_totals")
			}
			return err
		}
	}

	return nil
}

func (m *ActivityStats) validateAllRunTotals(formats strfmt.Registry) error {
	if swag.IsZero(m.AllRunTotals) { // not required
		return nil
	}

	if m.AllRunTotals != nil {
		if err := m.AllRunTotals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("all_run_totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("all_run_totals")
			}
			return err
		}
	}

	return nil
}

func (m *ActivityStats) validateAllSwimTotals(formats strfmt.Registry) error {
	if swag.IsZero(m.AllSwimTotals) { // not required
		return nil
	}

	if m.AllSwimTotals != nil {
		if err := m.AllSwimTotals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("all_swim_totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("all_swim_totals")
			}
			return err
		}
	}

	return nil
}

func (m *ActivityStats) validateRecentRideTotals(formats strfmt.Registry) error {
	if swag.IsZero(m.RecentRideTotals) { // not required
		return nil
	}

	if m.RecentRideTotals != nil {
		if err := m.RecentRideTotals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recent_ride_totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recent_ride_totals")
			}
			return err
		}
	}

	return nil
}

func (m *ActivityStats) validateRecentRunTotals(formats strfmt.Registry) error {
	if swag.IsZero(m.RecentRunTotals) { // not required
		return nil
	}

	if m.RecentRunTotals != nil {
		if err := m.RecentRunTotals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recent_run_totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recent_run_totals")
			}
			return err
		}
	}

	return nil
}

func (m *ActivityStats) validateRecentSwimTotals(formats strfmt.Registry) error {
	if swag.IsZero(m.RecentSwimTotals) { // not required
		return nil
	}

	if m.RecentSwimTotals != nil {
		if err := m.RecentSwimTotals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recent_swim_totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recent_swim_totals")
			}
			return err
		}
	}

	return nil
}

func (m *ActivityStats) validateYtdRideTotals(formats strfmt.Registry) error {
	if swag.IsZero(m.YtdRideTotals) { // not required
		return nil
	}

	if m.YtdRideTotals != nil {
		if err := m.YtdRideTotals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ytd_ride_totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ytd_ride_totals")
			}
			return err
		}
	}

	return nil
}

func (m *ActivityStats) validateYtdRunTotals(formats strfmt.Registry) error {
	if swag.IsZero(m.YtdRunTotals) { // not required
		return nil
	}

	if m.YtdRunTotals != nil {
		if err := m.YtdRunTotals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ytd_run_totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ytd_run_totals")
			}
			return err
		}
	}

	return nil
}

func (m *ActivityStats) validateYtdSwimTotals(formats strfmt.Registry) error {
	if swag.IsZero(m.YtdSwimTotals) { // not required
		return nil
	}

	if m.YtdSwimTotals != nil {
		if err := m.YtdSwimTotals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ytd_swim_totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ytd_swim_totals")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this activity stats based on the context it is used
func (m *ActivityStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllRideTotals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAllRunTotals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAllSwimTotals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecentRideTotals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecentRunTotals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecentSwimTotals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateYtdRideTotals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateYtdRunTotals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateYtdSwimTotals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ActivityStats) contextValidateAllRideTotals(ctx context.Context, formats strfmt.Registry) error {

	if m.AllRideTotals != nil {
		if err := m.AllRideTotals.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("all_ride_totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("all_ride_totals")
			}
			return err
		}
	}

	return nil
}

func (m *ActivityStats) contextValidateAllRunTotals(ctx context.Context, formats strfmt.Registry) error {

	if m.AllRunTotals != nil {
		if err := m.AllRunTotals.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("all_run_totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("all_run_totals")
			}
			return err
		}
	}

	return nil
}

func (m *ActivityStats) contextValidateAllSwimTotals(ctx context.Context, formats strfmt.Registry) error {

	if m.AllSwimTotals != nil {
		if err := m.AllSwimTotals.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("all_swim_totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("all_swim_totals")
			}
			return err
		}
	}

	return nil
}

func (m *ActivityStats) contextValidateRecentRideTotals(ctx context.Context, formats strfmt.Registry) error {

	if m.RecentRideTotals != nil {
		if err := m.RecentRideTotals.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recent_ride_totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recent_ride_totals")
			}
			return err
		}
	}

	return nil
}

func (m *ActivityStats) contextValidateRecentRunTotals(ctx context.Context, formats strfmt.Registry) error {

	if m.RecentRunTotals != nil {
		if err := m.RecentRunTotals.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recent_run_totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recent_run_totals")
			}
			return err
		}
	}

	return nil
}

func (m *ActivityStats) contextValidateRecentSwimTotals(ctx context.Context, formats strfmt.Registry) error {

	if m.RecentSwimTotals != nil {
		if err := m.RecentSwimTotals.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recent_swim_totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recent_swim_totals")
			}
			return err
		}
	}

	return nil
}

func (m *ActivityStats) contextValidateYtdRideTotals(ctx context.Context, formats strfmt.Registry) error {

	if m.YtdRideTotals != nil {
		if err := m.YtdRideTotals.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ytd_ride_totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ytd_ride_totals")
			}
			return err
		}
	}

	return nil
}

func (m *ActivityStats) contextValidateYtdRunTotals(ctx context.Context, formats strfmt.Registry) error {

	if m.YtdRunTotals != nil {
		if err := m.YtdRunTotals.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ytd_run_totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ytd_run_totals")
			}
			return err
		}
	}

	return nil
}

func (m *ActivityStats) contextValidateYtdSwimTotals(ctx context.Context, formats strfmt.Registry) error {

	if m.YtdSwimTotals != nil {
		if err := m.YtdSwimTotals.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ytd_swim_totals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ytd_swim_totals")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ActivityStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ActivityStats) UnmarshalBinary(b []byte) error {
	var res ActivityStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
