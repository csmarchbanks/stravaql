// Code generated by go-swagger; DO NOT EDIT.

package segment_efforts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/csmarchbanks/stravaql/strava/model"
)

// GetSegmentEffortByIDReader is a Reader for the GetSegmentEffortByID structure.
type GetSegmentEffortByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSegmentEffortByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSegmentEffortByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetSegmentEffortByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetSegmentEffortByIDOK creates a GetSegmentEffortByIDOK with default headers values
func NewGetSegmentEffortByIDOK() *GetSegmentEffortByIDOK {
	return &GetSegmentEffortByIDOK{}
}

/* GetSegmentEffortByIDOK describes a response with status code 200, with default header values.

Representation of a segment effort.
*/
type GetSegmentEffortByIDOK struct {
	Payload *GetSegmentEffortByIDOKBody
}

func (o *GetSegmentEffortByIDOK) Error() string {
	return fmt.Sprintf("[GET /segment_efforts/{id}][%d] getSegmentEffortByIdOK  %+v", 200, o.Payload)
}
func (o *GetSegmentEffortByIDOK) GetPayload() *GetSegmentEffortByIDOKBody {
	return o.Payload
}

func (o *GetSegmentEffortByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSegmentEffortByIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSegmentEffortByIDDefault creates a GetSegmentEffortByIDDefault with default headers values
func NewGetSegmentEffortByIDDefault(code int) *GetSegmentEffortByIDDefault {
	return &GetSegmentEffortByIDDefault{
		_statusCode: code,
	}
}

/* GetSegmentEffortByIDDefault describes a response with status code -1, with default header values.

Unexpected error.
*/
type GetSegmentEffortByIDDefault struct {
	_statusCode int

	Payload *model.Fault
}

// Code gets the status code for the get segment effort by Id default response
func (o *GetSegmentEffortByIDDefault) Code() int {
	return o._statusCode
}

func (o *GetSegmentEffortByIDDefault) Error() string {
	return fmt.Sprintf("[GET /segment_efforts/{id}][%d] getSegmentEffortById default  %+v", o._statusCode, o.Payload)
}
func (o *GetSegmentEffortByIDDefault) GetPayload() *model.Fault {
	return o.Payload
}

func (o *GetSegmentEffortByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.Fault)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetSegmentEffortByIDOKBody get segment effort by ID o k body
swagger:model GetSegmentEffortByIDOKBody
*/
type GetSegmentEffortByIDOKBody struct {
	model.SummarySegmentEffort

	// activity
	Activity *model.MetaActivity `json:"activity,omitempty"`

	// athlete
	Athlete *model.MetaAthlete `json:"athlete,omitempty"`

	// The effort's average cadence
	AverageCadence float32 `json:"average_cadence,omitempty"`

	// The heart heart rate of the athlete during this effort
	AverageHeartrate float32 `json:"average_heartrate,omitempty"`

	// The average wattage of this effort
	AverageWatts float32 `json:"average_watts,omitempty"`

	// For riding efforts, whether the wattage was reported by a dedicated recording device
	DeviceWatts bool `json:"device_watts,omitempty"`

	// The end index of this effort in its activity's stream
	EndIndex int64 `json:"end_index,omitempty"`

	// Whether this effort should be hidden when viewed within an activity
	Hidden bool `json:"hidden,omitempty"`

	// The rank of the effort on the global leaderboard if it belongs in the top 10 at the time of upload
	// Maximum: 10
	// Minimum: 1
	KomRank int64 `json:"kom_rank,omitempty"`

	// The maximum heart rate of the athlete during this effort
	MaxHeartrate float32 `json:"max_heartrate,omitempty"`

	// The effort's moving time
	MovingTime int64 `json:"moving_time,omitempty"`

	// The name of the segment on which this effort was performed
	Name string `json:"name,omitempty"`

	// The rank of the effort on the athlete's leaderboard if it belongs in the top 3 at the time of upload
	// Maximum: 3
	// Minimum: 1
	PrRank int64 `json:"pr_rank,omitempty"`

	// segment
	Segment *model.SummarySegment `json:"segment,omitempty"`

	// The start index of this effort in its activity's stream
	StartIndex int64 `json:"start_index,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetSegmentEffortByIDOKBody) UnmarshalJSON(raw []byte) error {
	// GetSegmentEffortByIDOKBodyAO0
	var getSegmentEffortByIDOKBodyAO0 model.SummarySegmentEffort
	if err := swag.ReadJSON(raw, &getSegmentEffortByIDOKBodyAO0); err != nil {
		return err
	}
	o.SummarySegmentEffort = getSegmentEffortByIDOKBodyAO0

	// GetSegmentEffortByIDOKBodyAO1
	var dataGetSegmentEffortByIDOKBodyAO1 struct {
		Activity *model.MetaActivity `json:"activity,omitempty"`

		Athlete *model.MetaAthlete `json:"athlete,omitempty"`

		AverageCadence float32 `json:"average_cadence,omitempty"`

		AverageHeartrate float32 `json:"average_heartrate,omitempty"`

		AverageWatts float32 `json:"average_watts,omitempty"`

		DeviceWatts bool `json:"device_watts,omitempty"`

		EndIndex int64 `json:"end_index,omitempty"`

		Hidden bool `json:"hidden,omitempty"`

		KomRank int64 `json:"kom_rank,omitempty"`

		MaxHeartrate float32 `json:"max_heartrate,omitempty"`

		MovingTime int64 `json:"moving_time,omitempty"`

		Name string `json:"name,omitempty"`

		PrRank int64 `json:"pr_rank,omitempty"`

		Segment *model.SummarySegment `json:"segment,omitempty"`

		StartIndex int64 `json:"start_index,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataGetSegmentEffortByIDOKBodyAO1); err != nil {
		return err
	}

	o.Activity = dataGetSegmentEffortByIDOKBodyAO1.Activity

	o.Athlete = dataGetSegmentEffortByIDOKBodyAO1.Athlete

	o.AverageCadence = dataGetSegmentEffortByIDOKBodyAO1.AverageCadence

	o.AverageHeartrate = dataGetSegmentEffortByIDOKBodyAO1.AverageHeartrate

	o.AverageWatts = dataGetSegmentEffortByIDOKBodyAO1.AverageWatts

	o.DeviceWatts = dataGetSegmentEffortByIDOKBodyAO1.DeviceWatts

	o.EndIndex = dataGetSegmentEffortByIDOKBodyAO1.EndIndex

	o.Hidden = dataGetSegmentEffortByIDOKBodyAO1.Hidden

	o.KomRank = dataGetSegmentEffortByIDOKBodyAO1.KomRank

	o.MaxHeartrate = dataGetSegmentEffortByIDOKBodyAO1.MaxHeartrate

	o.MovingTime = dataGetSegmentEffortByIDOKBodyAO1.MovingTime

	o.Name = dataGetSegmentEffortByIDOKBodyAO1.Name

	o.PrRank = dataGetSegmentEffortByIDOKBodyAO1.PrRank

	o.Segment = dataGetSegmentEffortByIDOKBodyAO1.Segment

	o.StartIndex = dataGetSegmentEffortByIDOKBodyAO1.StartIndex

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetSegmentEffortByIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getSegmentEffortByIDOKBodyAO0, err := swag.WriteJSON(o.SummarySegmentEffort)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getSegmentEffortByIDOKBodyAO0)
	var dataGetSegmentEffortByIDOKBodyAO1 struct {
		Activity *model.MetaActivity `json:"activity,omitempty"`

		Athlete *model.MetaAthlete `json:"athlete,omitempty"`

		AverageCadence float32 `json:"average_cadence,omitempty"`

		AverageHeartrate float32 `json:"average_heartrate,omitempty"`

		AverageWatts float32 `json:"average_watts,omitempty"`

		DeviceWatts bool `json:"device_watts,omitempty"`

		EndIndex int64 `json:"end_index,omitempty"`

		Hidden bool `json:"hidden,omitempty"`

		KomRank int64 `json:"kom_rank,omitempty"`

		MaxHeartrate float32 `json:"max_heartrate,omitempty"`

		MovingTime int64 `json:"moving_time,omitempty"`

		Name string `json:"name,omitempty"`

		PrRank int64 `json:"pr_rank,omitempty"`

		Segment *model.SummarySegment `json:"segment,omitempty"`

		StartIndex int64 `json:"start_index,omitempty"`
	}

	dataGetSegmentEffortByIDOKBodyAO1.Activity = o.Activity

	dataGetSegmentEffortByIDOKBodyAO1.Athlete = o.Athlete

	dataGetSegmentEffortByIDOKBodyAO1.AverageCadence = o.AverageCadence

	dataGetSegmentEffortByIDOKBodyAO1.AverageHeartrate = o.AverageHeartrate

	dataGetSegmentEffortByIDOKBodyAO1.AverageWatts = o.AverageWatts

	dataGetSegmentEffortByIDOKBodyAO1.DeviceWatts = o.DeviceWatts

	dataGetSegmentEffortByIDOKBodyAO1.EndIndex = o.EndIndex

	dataGetSegmentEffortByIDOKBodyAO1.Hidden = o.Hidden

	dataGetSegmentEffortByIDOKBodyAO1.KomRank = o.KomRank

	dataGetSegmentEffortByIDOKBodyAO1.MaxHeartrate = o.MaxHeartrate

	dataGetSegmentEffortByIDOKBodyAO1.MovingTime = o.MovingTime

	dataGetSegmentEffortByIDOKBodyAO1.Name = o.Name

	dataGetSegmentEffortByIDOKBodyAO1.PrRank = o.PrRank

	dataGetSegmentEffortByIDOKBodyAO1.Segment = o.Segment

	dataGetSegmentEffortByIDOKBodyAO1.StartIndex = o.StartIndex

	jsonDataGetSegmentEffortByIDOKBodyAO1, errGetSegmentEffortByIDOKBodyAO1 := swag.WriteJSON(dataGetSegmentEffortByIDOKBodyAO1)
	if errGetSegmentEffortByIDOKBodyAO1 != nil {
		return nil, errGetSegmentEffortByIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetSegmentEffortByIDOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get segment effort by ID o k body
func (o *GetSegmentEffortByIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with model.SummarySegmentEffort
	if err := o.SummarySegmentEffort.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateActivity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAthlete(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKomRank(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrRank(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSegment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSegmentEffortByIDOKBody) validateActivity(formats strfmt.Registry) error {

	if swag.IsZero(o.Activity) { // not required
		return nil
	}

	if o.Activity != nil {
		if err := o.Activity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSegmentEffortByIdOK" + "." + "activity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSegmentEffortByIdOK" + "." + "activity")
			}
			return err
		}
	}

	return nil
}

func (o *GetSegmentEffortByIDOKBody) validateAthlete(formats strfmt.Registry) error {

	if swag.IsZero(o.Athlete) { // not required
		return nil
	}

	if o.Athlete != nil {
		if err := o.Athlete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSegmentEffortByIdOK" + "." + "athlete")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSegmentEffortByIdOK" + "." + "athlete")
			}
			return err
		}
	}

	return nil
}

func (o *GetSegmentEffortByIDOKBody) validateKomRank(formats strfmt.Registry) error {

	if swag.IsZero(o.KomRank) { // not required
		return nil
	}

	if err := validate.MinimumInt("getSegmentEffortByIdOK"+"."+"kom_rank", "body", o.KomRank, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("getSegmentEffortByIdOK"+"."+"kom_rank", "body", o.KomRank, 10, false); err != nil {
		return err
	}

	return nil
}

func (o *GetSegmentEffortByIDOKBody) validatePrRank(formats strfmt.Registry) error {

	if swag.IsZero(o.PrRank) { // not required
		return nil
	}

	if err := validate.MinimumInt("getSegmentEffortByIdOK"+"."+"pr_rank", "body", o.PrRank, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("getSegmentEffortByIdOK"+"."+"pr_rank", "body", o.PrRank, 3, false); err != nil {
		return err
	}

	return nil
}

func (o *GetSegmentEffortByIDOKBody) validateSegment(formats strfmt.Registry) error {

	if swag.IsZero(o.Segment) { // not required
		return nil
	}

	if o.Segment != nil {
		if err := o.Segment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSegmentEffortByIdOK" + "." + "segment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSegmentEffortByIdOK" + "." + "segment")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get segment effort by ID o k body based on the context it is used
func (o *GetSegmentEffortByIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with model.SummarySegmentEffort
	if err := o.SummarySegmentEffort.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateActivity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateAthlete(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSegment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSegmentEffortByIDOKBody) contextValidateActivity(ctx context.Context, formats strfmt.Registry) error {

	if o.Activity != nil {
		if err := o.Activity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSegmentEffortByIdOK" + "." + "activity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSegmentEffortByIdOK" + "." + "activity")
			}
			return err
		}
	}

	return nil
}

func (o *GetSegmentEffortByIDOKBody) contextValidateAthlete(ctx context.Context, formats strfmt.Registry) error {

	if o.Athlete != nil {
		if err := o.Athlete.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSegmentEffortByIdOK" + "." + "athlete")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSegmentEffortByIdOK" + "." + "athlete")
			}
			return err
		}
	}

	return nil
}

func (o *GetSegmentEffortByIDOKBody) contextValidateSegment(ctx context.Context, formats strfmt.Registry) error {

	if o.Segment != nil {
		if err := o.Segment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSegmentEffortByIdOK" + "." + "segment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSegmentEffortByIdOK" + "." + "segment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSegmentEffortByIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSegmentEffortByIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetSegmentEffortByIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
