// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdatableActivity updatable activity
//
// swagger:model updatableActivity
type UpdatableActivity struct {

	// Whether this activity is a commute
	Commute bool `json:"commute,omitempty"`

	// The description of the activity
	Description string `json:"description,omitempty"`

	// Identifier for the gear associated with the activity. ‘none’ clears gear from activity
	GearID string `json:"gear_id,omitempty"`

	// Whether this activity is muted
	HideFromHome bool `json:"hide_from_home,omitempty"`

	// The name of the activity
	Name string `json:"name,omitempty"`

	// sport type
	SportType SportType `json:"sport_type,omitempty"`

	// Whether this activity was recorded on a training machine
	Trainer bool `json:"trainer,omitempty"`

	// type
	Type ActivityType `json:"type,omitempty"`
}

// Validate validates this updatable activity
func (m *UpdatableActivity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSportType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdatableActivity) validateSportType(formats strfmt.Registry) error {
	if swag.IsZero(m.SportType) { // not required
		return nil
	}

	if err := m.SportType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sport_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sport_type")
		}
		return err
	}

	return nil
}

func (m *UpdatableActivity) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this updatable activity based on the context it is used
func (m *UpdatableActivity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSportType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdatableActivity) contextValidateSportType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SportType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sport_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sport_type")
		}
		return err
	}

	return nil
}

func (m *UpdatableActivity) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdatableActivity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdatableActivity) UnmarshalBinary(b []byte) error {
	var res UpdatableActivity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
