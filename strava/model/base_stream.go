// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BaseStream base stream
//
// swagger:model baseStream
type BaseStream struct {

	// The number of data points in this stream
	OriginalSize int64 `json:"original_size,omitempty"`

	// The level of detail (sampling) in which this stream was returned
	// Enum: [low medium high]
	Resolution string `json:"resolution,omitempty"`

	// The base series used in the case the stream was downsampled
	// Enum: [distance time]
	SeriesType string `json:"series_type,omitempty"`
}

// Validate validates this base stream
func (m *BaseStream) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResolution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeriesType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var baseStreamTypeResolutionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["low","medium","high"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseStreamTypeResolutionPropEnum = append(baseStreamTypeResolutionPropEnum, v)
	}
}

const (

	// BaseStreamResolutionLow captures enum value "low"
	BaseStreamResolutionLow string = "low"

	// BaseStreamResolutionMedium captures enum value "medium"
	BaseStreamResolutionMedium string = "medium"

	// BaseStreamResolutionHigh captures enum value "high"
	BaseStreamResolutionHigh string = "high"
)

// prop value enum
func (m *BaseStream) validateResolutionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, baseStreamTypeResolutionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BaseStream) validateResolution(formats strfmt.Registry) error {
	if swag.IsZero(m.Resolution) { // not required
		return nil
	}

	// value enum
	if err := m.validateResolutionEnum("resolution", "body", m.Resolution); err != nil {
		return err
	}

	return nil
}

var baseStreamTypeSeriesTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["distance","time"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseStreamTypeSeriesTypePropEnum = append(baseStreamTypeSeriesTypePropEnum, v)
	}
}

const (

	// BaseStreamSeriesTypeDistance captures enum value "distance"
	BaseStreamSeriesTypeDistance string = "distance"

	// BaseStreamSeriesTypeTime captures enum value "time"
	BaseStreamSeriesTypeTime string = "time"
)

// prop value enum
func (m *BaseStream) validateSeriesTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, baseStreamTypeSeriesTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BaseStream) validateSeriesType(formats strfmt.Registry) error {
	if swag.IsZero(m.SeriesType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeriesTypeEnum("series_type", "body", m.SeriesType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this base stream based on context it is used
func (m *BaseStream) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BaseStream) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BaseStream) UnmarshalBinary(b []byte) error {
	var res BaseStream
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
